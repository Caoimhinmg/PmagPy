#!/usr/bin/env python
import string,sys,pmag,copy
def main():
    """
    NAME
        kly-asc_magic.py

    DESCRIPTION
        converts ascii files generated by SUFAR ver.1.2 to MagIC formated
        files for use with PmagPy plotting software

    SYNTAX
        kly-asc_magic.py -h [command line options]

    OPTIONS
        -h: prints the help message and quits
        -f FILE: specify .asc input file name
        -Fa AFILE: specify rmag_anisotropy output file
        -Fr RFILE: specify rmag_results output file
        -Fs SFILE: specify er_specimens output file with location, sample, site, etc. information
        -usr USER: specify who made the measurements
        -loc LOC: specify location name for study 
        -ins INST: specify instrument used
        -spc SPEC: specify number of characters to specify specimen from sample
        -ncn NCON:  specify naming convention: default is #2 below

    DEFAULTS
        AFILE: rmag_anisotropy.txt
        RFILE: rmag_results.txt
        SFILE: default is to create new er_specimen.txt file
        USER: ""
        LOC: "unknown"
        INST: "PGL-KLY3"
        SPEC: 0  sample name is same as site (if SPEC is 1, sample is all but last character)
        creates new 'er_specimens.txt' file
        Sample naming convention:
            [1] XXXXY: where XXXX is an arbitrary length site designation and Y
                is the single character sample designation.  e.g., TG001a is the
                first sample from site TG001.    [default]
            [2] XXXX-YY: YY sample from site XXXX (XXX, YY of arbitary length) 
            [3] XXXX.YY: YY sample from site XXXX (XXX, YY of arbitary length)
            [4-Z] XXXXYYY:  YYY is sample designation with Z characters from site XXX
            [5] all others you will have to either customize your 
                self or e-mail ltauxe@ucsd.edu for help.  

    """
    citation='This study'
    cont=0
    samp_con,Z="1",1
    ResRecs,SucRecs,SpecRecs,SampRecs,SiteRecs=[],[],[],[],[]
    user,locname,specfile="","locname","er_specimens.txt"
    isspec,inst,specnum='0',"PGL-KLY3",0
    aoutput,routput='rmag_anisotropy.txt','rmag_results.txt'
    dir_path='.'
    if '-h' in sys.argv:
        print main.__doc__
        sys.exit()
    if '-usr' in sys.argv:
        ind=sys.argv.index('-usr')
        user=sys.argv[ind+1] 
    if "-ncn" in sys.argv:
        ind=sys.argv.index("-ncn")
        samp_con=sys.argv[ind+1]
        if "4" in samp_con:
            if "-" not in samp_con:
                print "option [4] must be in form 3-Z where Z is an integer"
                sys.exit()
            else:
                Z=samp_con.split("-")[1]
                samp_con="4"
    if '-f' in sys.argv:
        ind=sys.argv.index('-f')
        ascfile=sys.argv[ind+1] 
    elif '-i' not in sys.argv:
        print 'must specify ascii input file or use interactive option [-i]\n\n '
        print main.__doc__
        sys.exit()
    if '-Fa' in sys.argv:
        ind=sys.argv.index('-Fa')
        aoutput=sys.argv[ind+1] 
    if '-Fr' in sys.argv:
        ind=sys.argv.index('-Fr')
        routput=sys.argv[ind+1] 
    if '-Fs' in sys.argv:
        ind=sys.argv.index('-Fs')
        specfile=sys.argv[ind+1] 
        isspec='1'
    elif '-loc' in sys.argv:
        ind=sys.argv.index('-loc')
        locname=sys.argv[ind+1] 
        samp_con,Z=pmag.get_samp_con()
        if '-spc' in sys.argv:
            ind=sys.argv.index('-spc')
            specnum=-(int(sys.argv[ind+1]))
    if '-i' in sys.argv:
        user=raw_input("Who made these measurements? \n Use the earthref mailname please, [] \n")
        if user=="":user=""
        isspec=raw_input(" Is there an  existing er_specimen file [1] or do you wish to create one? [0] <return> to skip ")
        if isspec=="1":   
            specfile=raw_input("Enter er_specimen file name: [er_specimens.txt] ")
            if specfile=="":specfile='er_specimens.txt'
        elif isspec=="0":
            locname=raw_input("Enter location name for this study ")
            samp_con,Z=pmag.get_samp_con()
            ans=raw_input("How many characters to specify specimen [1] ")
            if ans=="":
                specnum=-1
            else:
                specnum=-int(ans)
        aoutput=raw_input("Filename for output [rmag_anisotropy.txt] ")
        if aoutput=="":aoutput="rmag_anisotropy.txt"
        routput=raw_input("Filename for results output [rmag_results.txt] ")
        if routput=="":routput="rmag_results.txt"
        ascfile=raw_input("Enter asc file for processing ")
    if isspec=="1": specs,file_type=pmag.magic_read(specfile)
    try:
        input=open(ascfile,'rU')
    except:
        print 'Error opening file: ', ascfile
        sys.exit()
    Data=input.readlines()
    k=0
    while k<len(Data):
        line = Data[k]
        words=line.split()
        if "ANISOTROPY" in words: # first line of data for the spec
            SucRec,SpecRec,SampRec,SiteRec,ResRec={},{},{},{},{}
            specname=words[0]
            SucRec['er_specimen_name']=specname
            if isspec=="1":
                for spec in specs:
                    if spec['er_specimen_name']==specname:
                        SucRec['er_sample_name']=spec['er_sample_name']
                        SucRec['er_site_name']=spec['er_site_name']
                        SucRec['er_location_name']=spec['er_location_name']
                        break
            elif isspec=="0":
                SucRec['er_sample_name']=specname[:specnum]
		SpecRec['er_sample_name']=specname[:specnum]
		SiteRec['er_sample_name']=specname[:specnum]
                SucRec['er_site_name']=pmag.parse_site(SucRec['er_sample_name'],samp_con,Z)
                SpecRec['er_site_name']=pmag.parse_site(SucRec['er_sample_name'],samp_con,Z)
                SampRec['er_site_name']=pmag.parse_site(SucRec['er_sample_name'],samp_con,Z)
                SiteRec['er_site_name']=pmag.parse_site(SucRec['er_sample_name'],samp_con,Z)
                SucRec['er_location_name']=locname
                SpecRec['er_location_name']=locname
                SampRec['er_location_name']=locname
                SiteRec['er_location_name']=locname
                SpecRec['er_citation_names']="This study"
                SampRec['er_citation_names']="This study"
                SiteRec['er_citation_names']="This study"
                ResRec['er_sample_names']=SucRec['er_sample_name']
                ResRec['er_site_names']=SucRec['er_site_name']
            SucRec['er_citation_names']="This study"
            SucRec['magic_instrument_codes']=inst
            SucRec['magic_method_codes']="LP-X:AE-H:LP-AN-MS"
            SucRec['magic_experiment_names']=specname+":"+"LP-AN-MS"
            SucRec['er_analyst_mail_names']=user
            SucRec['anisotropy_type']="AMS"
            SucRec['anisotropy_n']="15"
            ResRec['rmag_result_name']=SucRec['er_specimen_name']+'Specimen Coordinates'
            ResRec['er_specimen_names']=SucRec['er_specimen_name']
            ResRec['magic_experiment_names']=SucRec['magic_experiment_names']
            ResRec['anisotropy_type']=SucRec['anisotropy_type']
        if 'Azi' in words and isspec=='0':
            SampRec['sample_azimuth']=words[1]
            SampRec['sample_dip']='%7.1f'%(-float(words[1]))
            SpecRec['specimen_vol']='%8.3e'%(float(words[10])*1e-6) # convert actual volume to m^3 from cm^3
        if "[A/m]" in words:
            k+=2 # read in second line down
            line=Data[k]
            words=line.split()
            SucRec['anisotropy_mean']=words[1]
            SucRec['anisotropy_sigma']=words[2]
            SucRec['anisotropy_unit']='SI'
            ResRec['anisotropy_ftest']=words[3]
            ResRec['anisotropy_ftest12']=words[4]
            ResRec['anisotropy_ftest23']=words[5]
        if "susceptibilities" in words:
            k+=2 # read in second line down
            line=Data[k]
            words=line.split()
            ResRec['anisotropy_t1']='%6.4f'%(float(words[0])/3.)
            ResRec['anisotropy_t2']='%6.4f'%(float(words[1])/3.)
            ResRec['anisotropy_t3']='%6.4f'%(float(words[2])/3.)
            ResRec['anisotropy_v1_eta_semi_angle']=words[3]
            ResRec['anisotropy_v2_eta_semi_angle']=words[4]
            ResRec['anisotropy_v3_eta_semi_angle']=words[5]
            k+=2 # read in second line down
            line=Data[k]
            words=line.split()
            ResRec['anisotropy_v1_zeta_semi_angle']=words[4]
            ResRec['anisotropy_v2_zeta_semi_angle']=words[5]
            ResRec['anisotropy_v3_zeta_semi_angle']=words[6]
        if "factors" in words:
            k+=4 # read in second line down
            line=Data[k]
            words=line.split()
            ResRec['anisotropy_l']=words[0] 
            ResRec['anisotropy_f']=words[1] 
            ResRec['anisotropy_p']=words[2] 
            ResRec['anisotropy_pp']=words[3] 
            ResRec['anisotropy_t']=words[4] 
        if "Specimen" in words:  # first part of specimen data
            ResRec['anisotropy_v1_dec']=words[2] 
            ResRec['anisotropy_v2_dec']=words[3] 
            ResRec['anisotropy_v3_dec']=words[4] 
            SucRec['anisotropy_s1']='%6.4f'%(float(words[5])/3.) # eigenvalues sum to unity - not 3
            SucRec['anisotropy_s2']='%6.4f'%(float(words[6])/3.) 
            SucRec['anisotropy_s3']='%6.4f'%(float(words[7])/3.)
            k+=1
            line=Data[k]
            words=line.split()
            ResRec['anisotropy_v1_inc']=words[2] 
            ResRec['anisotropy_v2_inc']=words[3] 
            ResRec['anisotropy_v3_inc']=words[4] 
            SucRec['anisotropy_s4']='%6.4f'%(float(words[5])/3.) # eigenvalues sum to unity - not 3
            SucRec['anisotropy_s5']='%6.4f'%(float(words[6])/3.) 
            SucRec['anisotropy_s6']='%6.4f'%(float(words[7])/3.)
            SucRec['anisotropy_tilt_correction']='-1'
            ResRec['anisotropy_v1_eta_dec']=ResRec['anisotropy_v2_dec']
            ResRec['anisotropy_v1_eta_inc']=ResRec['anisotropy_v2_inc']
            ResRec['anisotropy_v1_zeta_dec']=ResRec['anisotropy_v3_dec']
            ResRec['anisotropy_v1_zeta_inc']=ResRec['anisotropy_v3_inc']
            ResRec['anisotropy_v2_eta_dec']=ResRec['anisotropy_v1_dec']
            ResRec['anisotropy_v2_eta_inc']=ResRec['anisotropy_v1_inc']
            ResRec['anisotropy_v2_zeta_dec']=ResRec['anisotropy_v3_dec']
            ResRec['anisotropy_v2_zeta_inc']=ResRec['anisotropy_v3_inc']
            ResRec['anisotropy_v3_eta_dec']=ResRec['anisotropy_v1_dec']
            ResRec['anisotropy_v3_eta_inc']=ResRec['anisotropy_v1_inc']
            ResRec['anisotropy_v3_zeta_dec']=ResRec['anisotropy_v2_dec']
            ResRec['anisotropy_v3_zeta_inc']=ResRec['anisotropy_v2_inc']
            ResRec['anisotropy_tilt_correction']='-1'
            k+=2 
            line=Data[k]
            words=line.split()
            SucRecs.append(SucRec) 
            ResRecs.append(ResRec) 
            ResRecG=copy.copy(ResRec)  
            SucRecG=copy.copy(SucRec) 
            ResRecG['rmag_result_name']=SucRec['er_specimen_name']+'Geographic Coordinates'
            ResRecG['anisotropy_v1_dec']=words[2] 
            ResRecG['anisotropy_v2_dec']=words[3] 
            ResRecG['anisotropy_v3_dec']=words[4] 
            SucRecG['anisotropy_s1']='%6.4f'%(float(words[5])/3.) # eigenvalues sum to unity - not 3
            SucRecG['anisotropy_s2']='%6.4f'%(float(words[6])/3.) 
            SucRecG['anisotropy_s3']='%6.4f'%(float(words[7])/3.)
            k+=1
            line=Data[k]
            words=line.split()
            ResRecG['anisotropy_v1_inc']=words[2] 
            ResRecG['anisotropy_v2_inc']=words[3] 
            ResRecG['anisotropy_v3_inc']=words[4] 
            SucRecG['anisotropy_s4']='%6.4f'%(float(words[5])/3.) # eigenvalues sum to unity - not 3
            SucRecG['anisotropy_s5']='%6.4f'%(float(words[6])/3.) 
            SucRecG['anisotropy_s6']='%6.4f'%(float(words[7])/3.)
            SucRecG['anisotropy_tilt_correction']='0'
            ResRecG['anisotropy_tilt_correction']='0'
            Dgeo,Igeo=float(ResRecG['anisotropy_v1_dec']), float(ResRecG['anisotropy_v1_inc'])
            ResRecG['anisotropy_v1_eta_dec']=ResRecG['anisotropy_v2_dec']
            ResRecG['anisotropy_v1_eta_inc']=ResRecG['anisotropy_v2_inc']
            ResRecG['anisotropy_v1_zeta_dec']=ResRecG['anisotropy_v3_dec']
            ResRecG['anisotropy_v1_zeta_inc']=ResRecG['anisotropy_v3_inc']
            ResRecG['anisotropy_v2_eta_dec']=ResRecG['anisotropy_v1_dec']
            ResRecG['anisotropy_v2_eta_inc']=ResRecG['anisotropy_v1_inc']
            ResRecG['anisotropy_v2_zeta_dec']=ResRecG['anisotropy_v3_dec']
            ResRecG['anisotropy_v2_zeta_inc']=ResRecG['anisotropy_v3_inc']
            ResRecG['anisotropy_v3_eta_dec']=ResRecG['anisotropy_v1_dec']
            ResRecG['anisotropy_v3_eta_inc']=ResRecG['anisotropy_v1_inc']
            ResRecG['anisotropy_v3_zeta_dec']=ResRecG['anisotropy_v2_dec']
            ResRecG['anisotropy_v3_zeta_inc']=ResRecG['anisotropy_v2_inc']
            k+=2 
            line=Data[k]
            words=line.split()
            ResRecs.append(ResRecG) 
            SucRecs.append(SucRecG) 
            SucRecT=copy.copy(SucRecG)
            ResRecT=copy.copy(ResRecG)
            ResRecT['anisotropy_v1_dec']=words[3] 
            ResRecT['anisotropy_v2_dec']=words[4] 
            ResRecT['anisotropy_v3_dec']=words[5] 
            SucRecT['anisotropy_s1']='%6.4f'%(float(words[6])/3.) # eigenvalues sum to unity - not 3
            SucRecT['anisotropy_s2']='%6.4f'%(float(words[7])/3.) 
            SucRecT['anisotropy_s3']='%6.4f'%(float(words[8])/3.)
            k+=1 # skip down 1
            line=Data[k]
            words=line.split()
            ResRecT['anisotropy_v1_inc']=words[2] 
            ResRecT['anisotropy_v2_inc']=words[3] 
            ResRecT['anisotropy_v3_inc']=words[4] 
            Dtilt,Itilt=float(ResRecT['anisotropy_v1_dec']), float(ResRecT['anisotropy_v1_inc'])
            DipDir,Dip=pmag.get_tilt(Dgeo,Igeo,Dtilt,Itilt)
            SampRec['sample_bed_dip_direction']='%7.1f'%(DipDir)
            SampRec['sample_bed_dip']='%7.1f'%(Dip)
            SucRecT['anisotropy_s4']='%6.4f'%(float(words[5])/3.) # eigenvalues sum to unity - not 3
            SucRecT['anisotropy_s5']='%6.4f'%(float(words[6])/3.) 
            SucRecT['anisotropy_s6']='%6.4f'%(float(words[7])/3.)
            SucRecT['anisotropy_tilt_correction']='100'
            ResRecT['anisotropy_tilt_correction']='100'
            ResRecT['anisotropy_v1_eta_dec']=ResRecT['anisotropy_v2_dec']
            ResRecT['anisotropy_v1_eta_inc']=ResRecT['anisotropy_v2_inc']
            ResRecT['anisotropy_v1_zeta_dec']=ResRecT['anisotropy_v3_dec']
            ResRecT['anisotropy_v1_zeta_inc']=ResRecT['anisotropy_v3_inc']
            ResRecT['anisotropy_v2_eta_dec']=ResRecT['anisotropy_v1_dec']
            ResRecT['anisotropy_v2_eta_inc']=ResRecT['anisotropy_v1_inc']
            ResRecT['anisotropy_v2_zeta_dec']=ResRecT['anisotropy_v3_dec']
            ResRecT['anisotropy_v2_zeta_inc']=ResRecT['anisotropy_v3_inc']
            ResRecT['anisotropy_v3_eta_dec']=ResRecT['anisotropy_v1_dec']
            ResRecT['anisotropy_v3_eta_inc']=ResRecT['anisotropy_v1_inc']
            ResRecT['anisotropy_v3_zeta_dec']=ResRecT['anisotropy_v2_dec']
            ResRecT['anisotropy_v3_zeta_inc']=ResRecT['anisotropy_v2_inc']
            SucRecs.append(SucRecT)
            ResRecs.append(ResRecT)
            SpecRecs.append(SpecRec)
            SampRecs.append(SampRec)
            SiteRecs.append(SiteRec)
        k+=1
    pmag.magic_write(aoutput,SucRecs,'rmag_anisotropy')
    print "anisotropy tensors put in ",aoutput
    pmag.magic_write(routput,ResRecs,'rmag_results')
    print "anisotropy results put in ",routput
    if isspec=="0":
        output="er_specimens.txt"
        pmag.magic_write(output,SpecRecs,'er_specimens')
        print "specimen info put in ",output
        output="er_samples.txt"
        pmag.magic_write(output,SampRecs,'er_samples')
        print "sample info put in ",output
        output="er_sites.txt"
        pmag.magic_write(output,SiteRecs,'er_sites')
        print "site info put in ",output
    print """"
         You can now import your data into the Magic Console and complete data entry, 
         for example the site locations, lithologies, etc. plotting can be done with aniso_magic.py
    """
main()
